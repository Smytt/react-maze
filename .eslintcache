[{"C:\\Work\\_playground\\react-maze\\src\\index.tsx":"1","C:\\Work\\_playground\\react-maze\\src\\reportWebVitals.ts":"2","C:\\Work\\_playground\\react-maze\\src\\App.tsx":"3","C:\\Work\\_playground\\react-maze\\src\\components\\Error.tsx":"4","C:\\Work\\_playground\\react-maze\\src\\components\\MazePicker.tsx":"5","C:\\Work\\_playground\\react-maze\\src\\components\\PickerCell.tsx":"6","C:\\Work\\_playground\\react-maze\\src\\types\\index.ts":"7","C:\\Work\\_playground\\react-maze\\src\\utils\\index.ts":"8"},{"size":542,"mtime":1608730963737,"results":"9","hashOfConfig":"10"},{"size":440,"mtime":1608730963739,"results":"11","hashOfConfig":"10"},{"size":1741,"mtime":1608730963730,"results":"12","hashOfConfig":"10"},{"size":388,"mtime":1608730963732,"results":"13","hashOfConfig":"10"},{"size":3288,"mtime":1608730963732,"results":"14","hashOfConfig":"10"},{"size":488,"mtime":1608730963733,"results":"15","hashOfConfig":"10"},{"size":486,"mtime":1608730963741,"results":"16","hashOfConfig":"10"},{"size":2410,"mtime":1608730963741,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"7s2ks9",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"C:\\Work\\_playground\\react-maze\\src\\index.tsx",[],["39","40"],"C:\\Work\\_playground\\react-maze\\src\\reportWebVitals.ts",[],"C:\\Work\\_playground\\react-maze\\src\\App.tsx",["41","42","43"],"import React, { useEffect, useState } from 'react';\r\nimport MazePicker from './components/MazePicker';\r\nimport { useMaze } from './hooks/useMaze';\r\nimport { Dimensions, Direction } from './types';\r\nimport { Button, Input, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap'\r\nimport Error from './components/Error';\r\n\r\nfunction App() {\r\n\r\n  const [width, setWidth] = useState(25);\r\n  const [height, setHeight] = useState(25);\r\n  const [mazeDimensions, setMazeDimensions] = useState<Dimensions>()  \r\n\r\n  useEffect(() => {\r\n    setMazeDimensions({\r\n      width, height\r\n    })\r\n  }, [width, height])\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ width: '500px', margin: '25px auto' }}>\r\n        <InputGroup className=\"my-4\">\r\n          <InputGroupAddon addonType=\"prepend\" >\r\n            <InputGroupText>Width</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input value={width} onChange={(e) => setWidth(+e.target.value)} />\r\n        </InputGroup>\r\n        <InputGroup className=\"my-4\">\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Height</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input value={height} onChange={(e) => setHeight(+e.target.value)} />\r\n        </InputGroup>\r\n        {/* <Button className=\"w-100\" type=\"submit\" onClick={showMazePicker}>Generate</Button> */}\r\n      </div>\r\n      {\r\n        mazeDimensions && mazeDimensions.height >= 2 && mazeDimensions.width >= 2 \r\n        ?\r\n        <div style={{ width: `${(mazeDimensions.width + 2) * 23}px`, margin: '0 auto' }}>\r\n          <MazePicker {...{mazeDimensions}} />\r\n        </div>\r\n        : <Error message=\"Maze dimensions have to be at least 2x2.\"/>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Work\\_playground\\react-maze\\src\\components\\Error.tsx",[],"C:\\Work\\_playground\\react-maze\\src\\components\\MazePicker.tsx",["44"],"import { useMaze } from \"../hooks/useMaze\";\r\nimport { Dimensions } from \"../types\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { generateEmptyMaze } from \"../utils\";\r\nimport PickerCell from \"./PickerCell\";\r\nimport { PickerCell as PickerCellType } from \"../types\"\r\n\r\nconst MazePicker: React.FC<Props> = ({ mazeDimensions }) => {\r\n\r\n  // const [maze] = useMaze(\r\n  //   width,\r\n  //   height,\r\n  //   { x: 0, y: 0, openDirection: Direction.Left },\r\n  //   { x: width - 1, y: height - 1, openDirection: Direction.Right }\r\n  // )\r\n  const [outerMaze, setOuterMaze] = useState<any[][]>([])\r\n\r\n  useEffect(() => {\r\n    setOuterMaze(generateEmptyMaze(mazeDimensions.width + 2, mazeDimensions.height + 2))\r\n  }, [mazeDimensions])\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        outerMaze.map((row, i) => {\r\n          if (i === 0) {\r\n            return (\r\n              <div>\r\n                {\r\n                  row.map((cell, i) => {\r\n                    if (i === 0) {\r\n                      return <PickerCell type={PickerCellType.Corner} />\r\n                    }\r\n                    else if (i === mazeDimensions.width + 2 - 1) {\r\n                      return <PickerCell type={PickerCellType.Corner} />\r\n                    }\r\n                    else {\r\n                      return (\r\n                        <PickerCell type={PickerCellType.Opening} />\r\n                      )\r\n                    }\r\n                  })\r\n                }\r\n              </div>\r\n            )\r\n          }\r\n          else if (i === mazeDimensions.height + 2 - 1) {\r\n            return (\r\n              <div>\r\n                {\r\n                  row.map((cell, i) => {\r\n                    if (i === 0) {\r\n                      return <PickerCell type={PickerCellType.Corner} />\r\n                    }\r\n                    else if (i === mazeDimensions.width + 2 - 1) {\r\n                      return <PickerCell type={PickerCellType.Corner} />\r\n                    }\r\n                    else {\r\n                      return (\r\n                        <PickerCell type={PickerCellType.Opening} />\r\n                      )\r\n                    }\r\n                  })\r\n                }\r\n              </div>\r\n            )\r\n          }\r\n          else\r\n            return (\r\n              <div>\r\n                {\r\n                  row.map((cell, i) => {\r\n                    if (i === 0) {\r\n                      return <PickerCell type={PickerCellType.Opening} />\r\n                    }\r\n                    else if (i === mazeDimensions.width + 2 - 1) {\r\n                      return <PickerCell type={PickerCellType.Opening} />\r\n                    }\r\n                    else {\r\n                      return (\r\n                        <PickerCell type={PickerCellType.Filler} />\r\n                      )\r\n                    }\r\n                  })\r\n                }\r\n              </div>\r\n            )\r\n        })\r\n      }\r\n\r\n    </div>\r\n    // <div>\r\n    //   {\r\n    //     maze.map(row =>\r\n    //       <div style={{ clear: 'both' }}>\r\n    //         {\r\n    //           row.map(cell => <Cell {...{ cell }} />)\r\n    //         }\r\n    //       </div>\r\n    //     )\r\n    //   }\r\n    // </div>\r\n  )\r\n}\r\n\r\ninterface Props {\r\n  mazeDimensions: Dimensions\r\n}\r\n\r\nexport default MazePicker;","C:\\Work\\_playground\\react-maze\\src\\components\\PickerCell.tsx",[],"C:\\Work\\_playground\\react-maze\\src\\types\\index.ts",[],["45","46"],"C:\\Work\\_playground\\react-maze\\src\\utils\\index.ts",["47"],"import _ from 'lodash';\r\nimport { Cell, Dimensions, Direction, Point } from \"../types\"\r\n\r\nexport const generateEmptyMaze = (width: number, height: number) => {\r\n  const row = []\r\n  while (row.length < width) {\r\n    row.push(null as unknown as Cell)\r\n  }\r\n  const maze = []\r\n  while (maze.length < height) {\r\n    maze.push([...row])\r\n  }\r\n  return maze as Cell[][]\r\n}\r\n\r\nexport const generateMaze = (\r\n  width: number,\r\n  height: number,\r\n  start: Point,\r\n  exit: Point\r\n): Cell[][] => {\r\n  const maze = generateEmptyMaze(width, height)\r\n  generateCell(maze, start, start, exit, undefined)\r\n  return maze\r\n}\r\n\r\nexport const generateCell = (maze: Cell[][], point: Point, start: Point, exit: Point, previousCellDirection?: Direction) => {\r\n  if (maze[point.y][point.x]) {\r\n    return;\r\n  }\r\n\r\n  const directions: Direction[] = []\r\n  const border = {\r\n    [Direction.Up]: true,\r\n    [Direction.Right]: true,\r\n    [Direction.Down]: true,\r\n    [Direction.Left]: true\r\n  }\r\n\r\n  if (point.x + 1 < maze[0].length && !maze[point.y][point.x + 1]) {\r\n    directions.push(Direction.Right)\r\n  }\r\n\r\n  if (point.x > 0 && !maze[point.y][point.x - 1]) {\r\n    directions.push(Direction.Left)\r\n  }\r\n\r\n  if (point.y + 1 < maze.length && !maze[point.y + 1][point.x]) {\r\n    directions.push(Direction.Down)\r\n  }\r\n\r\n  if (point.y > 0 && !maze[point.y - 1][point.x]) {\r\n    directions.push(Direction.Up)\r\n  }\r\n\r\n  directions.forEach(direction => border[direction] = false);\r\n  if (previousCellDirection) border[previousCellDirection] = false;\r\n\r\n  if (point.x === start.x && point.y === start.y) {\r\n    border[start.openDirection!] = false;\r\n  }\r\n  if (point.x === exit.x && point.y === exit.y) {\r\n    border[exit.openDirection!] = false;\r\n  }\r\n\r\n  maze[point.y][point.x] = {\r\n    border,\r\n    ...point\r\n  }\r\n\r\n  const shuffledDirections = _.shuffle(directions)\r\n\r\n  shuffledDirections.forEach(direction => {\r\n    switch (direction) {\r\n      case Direction.Up: generateCell(maze, { x: point.x, y: point.y - 1 }, start, exit, Direction.Down); break;\r\n      case Direction.Right: generateCell(maze, { x: point.x + 1, y: point.y }, start, exit, Direction.Left); break;\r\n      case Direction.Down: generateCell(maze, { x: point.x, y: point.y + 1 }, start, exit, Direction.Up); break;\r\n      case Direction.Left: generateCell(maze, { x: point.x - 1, y: point.y }, start, exit, Direction.Right); break;\r\n      default: break;\r\n    }\r\n  })\r\n}",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":3,"column":10,"nodeType":"54","messageId":"55","endLine":3,"endColumn":17},{"ruleId":"52","severity":1,"message":"56","line":4,"column":22,"nodeType":"54","messageId":"55","endLine":4,"endColumn":31},{"ruleId":"52","severity":1,"message":"57","line":5,"column":10,"nodeType":"54","messageId":"55","endLine":5,"endColumn":16},{"ruleId":"52","severity":1,"message":"53","line":1,"column":10,"nodeType":"54","messageId":"55","endLine":1,"endColumn":17},{"ruleId":"48","replacedBy":"58"},{"ruleId":"50","replacedBy":"59"},{"ruleId":"52","severity":1,"message":"60","line":2,"column":16,"nodeType":"54","messageId":"55","endLine":2,"endColumn":26},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"@typescript-eslint/no-unused-vars","'useMaze' is defined but never used.","Identifier","unusedVar","'Direction' is defined but never used.","'Button' is defined but never used.",["61"],["62"],"'Dimensions' is defined but never used.","no-global-assign","no-unsafe-negation"]