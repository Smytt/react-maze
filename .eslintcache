[{"C:\\Work\\_playground\\react-maze\\src\\index.tsx":"1","C:\\Work\\_playground\\react-maze\\src\\reportWebVitals.ts":"2","C:\\Work\\_playground\\react-maze\\src\\App.tsx":"3","C:\\Work\\_playground\\react-maze\\src\\components\\Error.tsx":"4","C:\\Work\\_playground\\react-maze\\src\\components\\MazePicker.tsx":"5","C:\\Work\\_playground\\react-maze\\src\\components\\PickerCell.tsx":"6","C:\\Work\\_playground\\react-maze\\src\\types\\index.ts":"7","C:\\Work\\_playground\\react-maze\\src\\utils\\index.ts":"8","C:\\Work\\_playground\\react-maze\\src\\providers\\SelectedCellsProvider.tsx":"9","C:\\Work\\_playground\\react-maze\\src\\components\\GenerationButton.tsx":"10","C:\\Work\\_playground\\react-maze\\src\\components\\MazeContainer.tsx":"11","C:\\Work\\_playground\\react-maze\\src\\components\\Maze.tsx":"12","C:\\Work\\_playground\\react-maze\\src\\hooks\\useMaze.ts":"13","C:\\Work\\_playground\\react-maze\\src\\components\\Cell.tsx":"14"},{"size":542,"mtime":1608730963737,"results":"15","hashOfConfig":"16"},{"size":440,"mtime":1608730963739,"results":"17","hashOfConfig":"16"},{"size":1782,"mtime":1609690873224,"results":"18","hashOfConfig":"16"},{"size":388,"mtime":1609688136612,"results":"19","hashOfConfig":"16"},{"size":3763,"mtime":1609690826395,"results":"20","hashOfConfig":"16"},{"size":680,"mtime":1609690322227,"results":"21","hashOfConfig":"16"},{"size":486,"mtime":1609682781591,"results":"22","hashOfConfig":"16"},{"size":2428,"mtime":1609689788336,"results":"23","hashOfConfig":"16"},{"size":662,"mtime":1609690035943,"results":"24","hashOfConfig":"16"},{"size":550,"mtime":1609686928412,"results":"25","hashOfConfig":"16"},{"size":583,"mtime":1609690401140,"results":"26","hashOfConfig":"16"},{"size":646,"mtime":1609690705166,"results":"27","hashOfConfig":"16"},{"size":442,"mtime":1608730963735,"results":"28","hashOfConfig":"16"},{"size":555,"mtime":1608730963731,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"7s2ks9",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Work\\_playground\\react-maze\\src\\index.tsx",[],["66","67"],"C:\\Work\\_playground\\react-maze\\src\\reportWebVitals.ts",[],"C:\\Work\\_playground\\react-maze\\src\\App.tsx",["68","69","70","71","72"],"import React, { useEffect, useState } from 'react';\r\nimport MazePicker from './components/MazePicker';\r\nimport { useMaze } from './hooks/useMaze';\r\nimport { Dimensions, Direction } from './types';\r\nimport { Button, Input, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap'\r\nimport SelectedCellsProvider from './providers/SelectedCellsProvider';\r\nimport GenerationButton from './components/GenerationButton';\r\nimport MazeContainer from './components/MazeContainer';\r\n\r\nfunction App() {\r\n  const [width, setWidth] = useState(15);\r\n  const [height, setHeight] = useState(15);\r\n  const [mazeDimensions, setMazeDimensions] = useState<Dimensions>()\r\n\r\n  useEffect(() => {\r\n    setMazeDimensions({\r\n      width, height\r\n    })\r\n  }, [width, height])\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ width: '500px', margin: '25px auto' }}>\r\n        <InputGroup className=\"my-4\">\r\n          <InputGroupAddon addonType=\"prepend\" >\r\n            <InputGroupText>Width</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input value={width} onChange={(e) => setWidth(+e.target.value)} />\r\n        </InputGroup>\r\n        <InputGroup className=\"my-4\">\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>Height</InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input value={height} onChange={(e) => setHeight(+e.target.value)} />\r\n        </InputGroup>\r\n        {/* <Button className=\"w-100\" type=\"submit\" onClick={showMazePicker}>Generate</Button> */}\r\n      </div>\r\n      <SelectedCellsProvider>\r\n        <MazeContainer {...{ mazeDimensions }} />\r\n        {/* <div style={{ width: '500px', margin: '25px auto' }}>\r\n          <GenerationButton />\r\n        </div> */}\r\n      </SelectedCellsProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Work\\_playground\\react-maze\\src\\components\\Error.tsx",[],"C:\\Work\\_playground\\react-maze\\src\\components\\MazePicker.tsx",["73","74"],"import { useMaze } from \"../hooks/useMaze\";\r\nimport { Dimensions, Direction } from \"../types\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { generateEmptyMaze, generateMaze } from \"../utils\";\r\nimport PickerCell from \"./PickerCell\";\r\nimport { PickerCell as PickerCellType } from \"../types\";\r\nimport Error from './Error';\r\n\r\nconst MazePicker: React.FC<Props> = ({ mazeDimensions }) => {\r\n  const [outerMaze, setOuterMaze] = useState<any[][]>([])\r\n\r\n  useEffect(() => {\r\n    if (mazeDimensions && mazeDimensions.height >= 2 && mazeDimensions.width >= 2) {\r\n      setOuterMaze(generateEmptyMaze(mazeDimensions.width + 2, mazeDimensions.height + 2))\r\n    }\r\n  }, [mazeDimensions])\r\n\r\n  const generateMaze = () => {\r\n    return (\r\n      <div style={{ width: `${(mazeDimensions!.width + 2) * 23}px`, margin: '0 auto' }}>\r\n        {\r\n          outerMaze.map((row, i) => {\r\n            if (i === 0) {\r\n              return (\r\n                <div>\r\n                  {\r\n                    row.map((cell, i) => {\r\n                      if (i === 0) {\r\n                        return <PickerCell type={PickerCellType.Corner} />\r\n                      }\r\n                      else if (i === mazeDimensions!.width + 2 - 1) {\r\n                        return <PickerCell type={PickerCellType.Corner} />\r\n                      }\r\n                      else {\r\n                        return (\r\n                          <PickerCell point={{ y: 0, x: i - 1, openDirection: Direction.Up }} type={PickerCellType.Opening} />\r\n                        )\r\n                      }\r\n                    })\r\n                  }\r\n                </div>\r\n              )\r\n            }\r\n            else if (i === mazeDimensions!.height + 2 - 1) {\r\n              return (\r\n                <div>\r\n                  {\r\n                    row.map((cell, i) => {\r\n                      if (i === 0) {\r\n                        return <PickerCell type={PickerCellType.Corner} />\r\n                      }\r\n                      else if (i === mazeDimensions!.width + 2 - 1) {\r\n                        return <PickerCell type={PickerCellType.Corner} />\r\n                      }\r\n                      else {\r\n                        return (\r\n                          <PickerCell point={{ y: mazeDimensions!.height - 1, x: i - 1, openDirection: Direction.Down }} type={PickerCellType.Opening} />\r\n                        )\r\n                      }\r\n                    })\r\n                  }\r\n                </div>\r\n              )\r\n            }\r\n            else\r\n              return (\r\n                <div>\r\n                  {\r\n                    row.map((cell, j) => {\r\n                      if (j === 0) {\r\n                        return <PickerCell point={{ y: i - 1, x: 0, openDirection: Direction.Left }} type={PickerCellType.Opening} />\r\n                      }\r\n                      else if (j === mazeDimensions!.width + 2 - 1) {\r\n                        return <PickerCell point={{ y: i - 1, x: mazeDimensions!.width - 1, openDirection: Direction.Right }} type={PickerCellType.Opening} />\r\n                      }\r\n                      else {\r\n                        return (\r\n                          <PickerCell type={PickerCellType.Filler} />\r\n                        )\r\n                      }\r\n                    })\r\n                  }\r\n                </div>\r\n              )\r\n          })\r\n        }\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {\r\n        mazeDimensions && mazeDimensions.height >= 2 && mazeDimensions.width >= 2\r\n          ? generateMaze()\r\n          : <Error message=\"Maze dimensions have to be at least 2x2.\" />\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\ninterface Props {\r\n  mazeDimensions?: Dimensions\r\n}\r\n\r\nexport default MazePicker;","C:\\Work\\_playground\\react-maze\\src\\components\\PickerCell.tsx",["75"],"import _ from 'lodash';\r\nimport { Direction, PickerCell as PickerCellType, Point } from \"../types\"\r\nimport '../css/cell.css'\r\nimport { useContext } from \"react\"\r\nimport { SelectedCellsContext } from \"../providers/SelectedCellsProvider\"\r\n\r\nconst PickerCell: React.FC<Props> = ({ type, point }) => {\r\n\r\n  const { points, addPoint } = useContext(SelectedCellsContext)\r\n\r\n  console.log('point')\r\n\r\n  const selectCell = () => {\r\n    addPoint(point)\r\n  }\r\n\r\n  return (\r\n    <div className={`cell ${type} ${_.some(points, point) ? 'selected' : ''}`} onClick={selectCell}>\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface Props {\r\n  type: PickerCellType,\r\n  point?: Point,\r\n}\r\n\r\nexport default PickerCell","C:\\Work\\_playground\\react-maze\\src\\types\\index.ts",[],["76","77"],"C:\\Work\\_playground\\react-maze\\src\\utils\\index.ts",["78"],"import _ from 'lodash';\r\nimport { Cell, Dimensions, Direction, Point } from \"../types\"\r\n\r\nexport const generateEmptyMaze = (width: number, height: number) => {\r\n  const row: Cell[] = []\r\n  while (row.length < width) {\r\n    row.push(null as unknown as Cell)\r\n  }\r\n  const maze: Cell[][] = []\r\n  while (maze.length < height) {\r\n    maze.push([...row])\r\n  }\r\n  return maze as Cell[][]\r\n}\r\n\r\nexport const generateMaze = (\r\n  width: number,\r\n  height: number,\r\n  start: Point,\r\n  exit: Point\r\n): Cell[][] => {\r\n  const maze = generateEmptyMaze(width, height)\r\n  generateCell(maze, start, start, exit, undefined)\r\n  return maze\r\n}\r\n\r\nexport const generateCell = (maze: Cell[][], point: Point, start: Point, exit: Point, previousCellDirection?: Direction) => {\r\n  if (maze[point.y][point.x]) {\r\n    return;\r\n  }\r\n\r\n  const directions: Direction[] = []\r\n  const border = {\r\n    [Direction.Up]: true,\r\n    [Direction.Right]: true,\r\n    [Direction.Down]: true,\r\n    [Direction.Left]: true\r\n  }\r\n\r\n  if (point.x + 1 < maze[0].length && !maze[point.y][point.x + 1]) {\r\n    directions.push(Direction.Right)\r\n  }\r\n\r\n  if (point.x > 0 && !maze[point.y][point.x - 1]) {\r\n    directions.push(Direction.Left)\r\n  }\r\n\r\n  if (point.y + 1 < maze.length && !maze[point.y + 1][point.x]) {\r\n    directions.push(Direction.Down)\r\n  }\r\n\r\n  if (point.y > 0 && !maze[point.y - 1][point.x]) {\r\n    directions.push(Direction.Up)\r\n  }\r\n\r\n  directions.forEach(direction => border[direction] = false);\r\n  if (previousCellDirection) border[previousCellDirection] = false;\r\n\r\n  if (point.x === start.x && point.y === start.y) {\r\n    border[start.openDirection!] = false;\r\n  }\r\n  if (point.x === exit.x && point.y === exit.y) {\r\n    border[exit.openDirection!] = false;\r\n  }\r\n\r\n  maze[point.y][point.x] = {\r\n    border,\r\n    ...point\r\n  }\r\n\r\n  const shuffledDirections = _.shuffle(directions)\r\n\r\n  shuffledDirections.forEach(direction => {\r\n    switch (direction) {\r\n      case Direction.Up: generateCell(maze, { x: point.x, y: point.y - 1 }, start, exit, Direction.Down); break;\r\n      case Direction.Right: generateCell(maze, { x: point.x + 1, y: point.y }, start, exit, Direction.Left); break;\r\n      case Direction.Down: generateCell(maze, { x: point.x, y: point.y + 1 }, start, exit, Direction.Up); break;\r\n      case Direction.Left: generateCell(maze, { x: point.x - 1, y: point.y }, start, exit, Direction.Right); break;\r\n      default: break;\r\n    }\r\n  })\r\n}","C:\\Work\\_playground\\react-maze\\src\\providers\\SelectedCellsProvider.tsx",[],"C:\\Work\\_playground\\react-maze\\src\\components\\GenerationButton.tsx",[],["79","80"],"C:\\Work\\_playground\\react-maze\\src\\components\\MazeContainer.tsx",["81"],"import { useContext, useEffect } from \"react\";\r\nimport { SelectedCellsContext } from \"../providers/SelectedCellsProvider\";\r\nimport Maze from \"./Maze\";\r\nimport MazePicker from \"./MazePicker\";\r\n\r\nconst MazeContainer = ({ mazeDimensions }) => {\r\n  const { points } = useContext(SelectedCellsContext)\r\n\r\n  const [start, exit] = points;\r\n\r\n  return (\r\n    <>\r\n      {\r\n        points.length !== 2\r\n          ? <MazePicker {...{ mazeDimensions }} />\r\n          // : null\r\n          : <Maze {... { mazeDimensions, start, exit }} />\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MazeContainer;","C:\\Work\\_playground\\react-maze\\src\\components\\Maze.tsx",[],"C:\\Work\\_playground\\react-maze\\src\\hooks\\useMaze.ts",[],"C:\\Work\\_playground\\react-maze\\src\\components\\Cell.tsx",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":2,"column":8,"nodeType":"88","messageId":"89","endLine":2,"endColumn":18},{"ruleId":"86","severity":1,"message":"90","line":3,"column":10,"nodeType":"88","messageId":"89","endLine":3,"endColumn":17},{"ruleId":"86","severity":1,"message":"91","line":4,"column":22,"nodeType":"88","messageId":"89","endLine":4,"endColumn":31},{"ruleId":"86","severity":1,"message":"92","line":5,"column":10,"nodeType":"88","messageId":"89","endLine":5,"endColumn":16},{"ruleId":"86","severity":1,"message":"93","line":7,"column":8,"nodeType":"88","messageId":"89","endLine":7,"endColumn":24},{"ruleId":"86","severity":1,"message":"90","line":1,"column":10,"nodeType":"88","messageId":"89","endLine":1,"endColumn":17},{"ruleId":"86","severity":1,"message":"94","line":4,"column":29,"nodeType":"88","messageId":"89","endLine":4,"endColumn":41},{"ruleId":"86","severity":1,"message":"91","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":19},{"ruleId":"82","replacedBy":"95"},{"ruleId":"84","replacedBy":"96"},{"ruleId":"86","severity":1,"message":"97","line":2,"column":16,"nodeType":"88","messageId":"89","endLine":2,"endColumn":26},{"ruleId":"82","replacedBy":"98"},{"ruleId":"84","replacedBy":"99"},{"ruleId":"86","severity":1,"message":"100","line":1,"column":22,"nodeType":"88","messageId":"89","endLine":1,"endColumn":31},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"@typescript-eslint/no-unused-vars","'MazePicker' is defined but never used.","Identifier","unusedVar","'useMaze' is defined but never used.","'Direction' is defined but never used.","'Button' is defined but never used.","'GenerationButton' is defined but never used.","'generateMaze' is defined but never used.",["101"],["102"],"'Dimensions' is defined but never used.",["101"],["102"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]